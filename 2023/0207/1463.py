import sys
sys.stdin = open('1463input.txt')

# 정수 x에 사용할 수 있는 연산은 세가지
# X가 3으로 나누어 떨어지면 3으로 나눔
# X가 2로 나누어 떨어지면 2로 나눔
# 1을 뺌
# 정수 N이 주어졌을 때, 위의 세가지 연산을 이용하여 1을 만들려 한다. 연산을 사용하는 횟수의 최솟값은?
# N의 범위는 1에서 10**6까지

N = int(input())

# dp를 사용하는 이유
# 특정 지점까지 도달하는데 걸리는 최소시간을 저장해두고
# 다음 단계로 넘어갈 때 저장된 값을 불러와 빠르게 연산하기 위함
# 탐색 도중 겹치는 부분이 있다 -> DP 사용하여 시간을 줄이자
# 우선 완탐이 필요함
# 1부터 N까지의 수를 담을 수 있는 공간이 필요함
arr = [0] * (N + 1) # 인덱스 고려, 인덱스 값과 수가 일치
# arr[5]에는 5를 만들기 위한 최솟값을 저장할 예정
# 1에서 N을 만드는데 필요한 연산 횟수를 계산해보자
for i in range(2, N+1): # 0과 1은 고려할 필요가 없음
    arr[i] = arr[i-1] + 1

    if i % 3 == 0:
        arr[i] = min(arr[i], arr[i//3] + 1)
    if i % 2 == 0:
        arr[i] = min(arr[i], arr[i//2] + 1)

print(arr[N])